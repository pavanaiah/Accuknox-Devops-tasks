

Steps:
1.Creating a Dockerfile for the wisecow application.
2. Creating Kubernetes manifests to deploy the wisecow application.
3. Setting up GitHub Actions for CI/CD to build and push the Docker image.
4. Enabling secure TLS communication for the wisecow app.

solution:

1. Dockerfile for the Wisecow Application

Create a Dockerfile in the gITHUB repository:


# Use an official Python runtime as a parent image
FROM ubuntu:latest

# Set environment variables
ENV SRVPORT=4499
ENV RSPFILE=response

# Install prerequisites
RUN apt-get update && apt-get install -y \
    fortune-mod \
    cowsay \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# Copy the script into the container
COPY wisecow.sh /app/

# Set the working directory
WORKDIR /app

# Make the script executable
RUN chmod +x wisecow.sh

# Expose the port
EXPOSE $SRVPORT

# Run the script
CMD ["./wisecow.sh"]


2. Kubernetes Manifests
Create a folder called k8s in the repository, then create the BELOW files:

a. deployement.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wisecow-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wisecow
  template:
    metadata:
      labels:
        app: wisecow
    spec:
      containers:
      - name: wisecow
        image: <DOCKER_IMAGE>  # Replace with your Docker image
        ports:
        - containerPort: 4499
        env:
        - name: SRVPORT
          value: "4499"


b. service.yaml

apiVersion: v1
kind: Service
metadata:
  name: wisecow-service
spec:
  selector:
    app: wisecow
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4499
  type: LoadBalancer


3. GitHub Actions Workflow for CI/CD

Create a .github/workflows/docker-image.yml file in the github repository and add the below content in it:

name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/wisecow:latest


Note: set the DOCKER_USERNAME and DOCKER_PASSWORD secrets in your GitHub repository settings.

4. Enable Secure TLS Communication.

create k8s secrets with below command. but you need to have tls.crt and tls.key files(certificates) we can create these certs with Lets encrypt.

After getting the tls.crt and tls.key files, create a Kubernetes Secret to store the TLS certificate and key with the below command.

kubectl create secret tls wisecow-tls --cert=tls.crt --key=tls.key

Post this, configuring ingress to use the certs.

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wisecow-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - <YOUR_DOMAIN>  # Replace with your domain
    secretName: wisecow-tls
  rules:
  - host: <YOUR_DOMAIN>  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wisecow-service
            port:
              number: 80


Note: In Domain Configuration, we need to ensure that your domain's DNS is properly set to point to your Kubernetes cluster's external IP.




